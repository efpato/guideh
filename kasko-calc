#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import argparse
import signal
import time

import xlrd
import xlsxwriter
from selenium.webdriver import Firefox

from pages import KaskoCalcPage


PAGE_LOAD_TIMEOUT = 60

logging.basicConfig(format=("%(asctime)s  %(levelname)-8s "
                            "%(module)-15s %(message)s"),
                    level=logging.DEBUG)
logging.getLogger(
    "selenium.webdriver.remote.remote_connection").setLevel(logging.WARNING)


def load(filename):
    logging.debug("Loading data from '%s'", filename)
    workbook = xlrd.open_workbook(filename)
    sheet = workbook.sheet_by_index(0)

    data = []
    if sheet.nrows > 1:
        for row in range(sheet.nrows)[1:]:
            data.append({
                "city": sheet.cell_value(row, 0),
                "brand": sheet.cell_value(row, 1),
                "model": sheet.cell_value(row, 2),
                "year": int(sheet.cell_value(row, 3)),
                "cost": sheet.cell_value(row, 4),
                "kpu": sheet.cell_value(row, 5),
                "kpu_model": sheet.cell_value(row, 6),
                "dop_secr": sheet.cell_value(row, 7) == "Да",
                "dop_igla": sheet.cell_value(row, 8) == "Да",
                "dop_mark": sheet.cell_value(row, 9) == "Да",
                "less_1000": sheet.cell_value(row, 10) == "Да",
                "credit": sheet.cell_value(row, 11) == "Да",
                "oldcomp_none": sheet.cell_value(row, 12) == "Да",
                "oldcomp_one_year": sheet.cell_value(row, 13) == "Да",
                "sto_guide": sheet.cell_value(row, 14) == "Да",
                "sto_dealer": sheet.cell_value(row, 15) == "Да",
                "franchise": sheet.cell_value(row, 16),
                "multidrive": sheet.cell_value(row, 17) == "Да",
                "drivers": sheet.cell_value(row, 18) == "Да",
                "driver_age": [
                    int(float(age))
                    for age in str(sheet.cell_value(row, 19)).split(';')
                    if str(sheet.cell_value(row, 19))
                ],
                "driver_experience": [
                    int(float(experience))
                    for experience in str(sheet.cell_value(row, 20)).split(';')
                    if str(sheet.cell_value(row, 20))
                ]
            })

    logging.debug("Data has been loaded (%d rows)", len(data))

    return data


def report(filename, results):
    logging.debug("Creating report ...")
    workbook_in = xlrd.open_workbook(filename)
    sheet_in = workbook_in.sheet_by_index(0)

    out = "%s.out.xlsx" % os.path.basename(filename).split('.')[0]
    workbook_out = xlsxwriter.Workbook(out)
    sheet_out = workbook_out.add_worksheet()

    for row in range(sheet_in.nrows):
        for col in range(sheet_in.ncols):
            sheet_out.write(row, col, sheet_in.cell_value(row, col))

        col = sheet_in.ncols
        if row < len(results):
            sheet_out.write(row, col, results[row])

    workbook_out.close()
    logging.debug("Report has been created: '%s'", out)


def calculate(params):
    logging.debug("Starting calculation: params => %s", params)

    driver = None
    result = None

    for i in range(3):
        if stopped:
            break

        logging.debug("Attempt #%d...", (i + 1))

        try:
            driver = Firefox()
            driver.maximize_window()
            logging.debug("Firefox started")

            driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
            logging.debug("Set page_load_timeout=%d", PAGE_LOAD_TIMEOUT)

            page = KaskoCalcPage(driver)
            logging.debug("Opening '%s'", KaskoCalcPage.URL)
            page.get(KaskoCalcPage.URL)

            page.city = params["city"]
            page.brand = params["brand"]
            page.model = params["model"]
            page.year = params["year"]
            page.cost = params["cost"]
            page.kpu = params["kpu"]
            page.kpu_model = params["kpu_model"]
            page.dop_secr = params["dop_secr"]
            page.dop_igla = params["dop_igla"]
            page.dop_mark = params["dop_mark"]
            page.less_1000 = params["less_1000"]
            page.credit = params["credit"]
            page.oldcomp_none = params["oldcomp_none"]
            page.oldcomp_one_year = params["oldcomp_one_year"]
            page.sto_guide = params["sto_guide"]
            page.sto_dealer = params["sto_dealer"]
            page.franchise = params["franchise"]
            page.multidrive = params["multidrive"]
            page.drivers = params["drivers"]
            if params["drivers"]:
                for index in range(len(params["driver_age"])):
                    if index > 0:
                        page.add_driver.click()
                    page.driver_age = params["driver_age"][index]
                    page.driver_experience = params["driver_experience"][index]

            time.sleep(1)
            result = page.result.text
            break
        except KeyboardInterrupt:
            raise
        except Exception as e:
            logging.exception(e)
            if i == 2:
                result = "%s" % e
                break
        finally:
            if driver is not None:
                driver.quit()

    logging.debug("Calculation has been finished. Result => %s", result)

    return result


stopped = False


def main():
    def sigint_handler(signum, frame):
        global stopped

        logging.info("Got signal: signum=%d, frame=%s", signum, frame)
        stopped = True

    signal.signal(signal.SIGINT, sigint_handler)

    parser = argparse.ArgumentParser()
    parser.add_argument("filename", help="excel-file with input data")
    args = parser.parse_args()

    if not os.path.exists(args.filename):
        parser.error("File '%s' not exists" % args.filename)

    results = ["Стоимость полиса"]
    for data in load(args.filename):
        if stopped:
            break
        results.append(calculate(data))

    report(args.filename, results)


if __name__ == "__main__":
    main()
